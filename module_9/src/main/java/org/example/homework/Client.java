package main.java.org.example.homework;

import java.io.*;
import java.net.*;
import java.util.Objects;
import java.util.concurrent.*;

public class Client {
    public static void main(String[] args) {
        String serverAddress = "127.0.0.1";
        int port = 7182;

        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
        ScheduledFuture<?> timeoutFuture = null;

        try (Socket socket = new Socket(serverAddress, port);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in))) {

            System.out.println("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É.");

            // ===== üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
            System.out.print(in.readLine()); // –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:
            String login = consoleInput.readLine();
            out.println(login);

            System.out.print(in.readLine()); // –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:
            String password = consoleInput.readLine();
            out.println(password);

            String authResponse = in.readLine();
            System.out.println("–°–µ—Ä–≤–µ—Ä: " + authResponse);
            if (authResponse.startsWith("–û—à–∏–±–∫–∞")) {
                return;
            }
            // ==========================

            Runnable timeoutTask = () -> {
                System.out.println("‚è± –¢–∞–π–º-–∞—É—Ç. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ 30 —Å–µ–∫—É–Ω–¥.");
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            };

            timeoutFuture = scheduler.schedule(timeoutTask, 30, TimeUnit.SECONDS);

            String clientMessage;
            String serverMessage;

            while (true) {
                System.out.print("–ö–ª–∏–µ–Ω—Ç: ");
                clientMessage = consoleInput.readLine();
                out.println(clientMessage);

                if (clientMessage.equalsIgnoreCase("exit")) {
                    System.out.println("–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
                    break;
                }

                serverMessage = in.readLine();

                if (timeoutFuture != null && !timeoutFuture.isDone()) {
                    timeoutFuture.cancel(false);
                }
                timeoutFuture = scheduler.schedule(timeoutTask, 30, TimeUnit.SECONDS);

                if (Objects.isNull(serverMessage) || serverMessage.equalsIgnoreCase("exit")) {
                    System.out.println("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
                    break;
                }

                System.out.println("–°–µ—Ä–≤–µ—Ä: " + serverMessage);
            }

        } catch (IOException e) {
            System.out.println("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.");
        } finally {
            scheduler.shutdown();
        }
    }
}
