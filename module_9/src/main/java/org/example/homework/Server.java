package main.java.org.example.homework;

import java.io.*;
import java.net.*;
import java.time.LocalTime;
import java.util.*;
import java.util.concurrent.*;

public class Server {
    public static void main(String[] args) {
        int port = 7182;

        Map<String, String> users = new HashMap<>();
        users.put("user1", "1234");
        users.put("admin", "adminpass");

        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
        ScheduledFuture<?> timeoutFuture = null;

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("–°–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω, –∂–¥–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");

            try (Socket clientSocket = serverSocket.accept();
                 BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                 PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                 BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in))) {

                System.out.println("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: " + clientSocket.getInetAddress());

                // ===== üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
                out.println("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:");
                String login = in.readLine();

                out.println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
                String password = in.readLine();

                if (!users.containsKey(login) || !users.get(login).equals(password)) {
                    out.println("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.");
                    clientSocket.close();
                    return;
                }

                out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + login + "!");
                // ==========================

                // –ó–∞–¥–∞—á–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                Runnable timeoutTask = () -> {
                    System.out.println("‚è± –¢–∞–π–º-–∞—É—Ç. –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 30 —Å–µ–∫—É–Ω–¥.");
                    try {
                        clientSocket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                };

                timeoutFuture = scheduler.schedule(timeoutTask, 30, TimeUnit.SECONDS);

                String clientMessage;
                String serverMessage;

                while (true) {
                    clientMessage = in.readLine();

                    if (timeoutFuture != null && !timeoutFuture.isDone()) {
                        timeoutFuture.cancel(false);
                    }
                    timeoutFuture = scheduler.schedule(timeoutTask, 30, TimeUnit.SECONDS);

                    if (clientMessage == null || clientMessage.equalsIgnoreCase("exit")) {
                        System.out.println("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: " + clientSocket.getInetAddress());
                        break;
                    }

                    System.out.println("–ö–ª–∏–µ–Ω—Ç: " + clientMessage);

                    if (clientMessage.equalsIgnoreCase("/time")) {
                        serverMessage = LocalTime.now().toString();
                        out.println(serverMessage);
                        continue;
                    }

                    System.out.print("–°–µ—Ä–≤–µ—Ä: ");
                    serverMessage = consoleInput.readLine();
                    out.println(serverMessage);

                    if (serverMessage.equalsIgnoreCase("exit")) {
                        System.out.println("–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...");
                        break;
                    }
                }

            } catch (IOException e) {
                System.out.println("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.");
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            scheduler.shutdown();
        }
    }
}
